Chapter 6 Notes

Data Processing

Data Processing instructions, 18 total:

ADD, ADC, SUB, SBC, RSB, RSC
MOV, MVN, CMP, CPN
AND, ORR, EOR
BIC, TST, TEQ
MUL, MLA

*AND, ORR, EOR, BIC, TST, and TEQ are examined in next Chapter.

<Instruction>
	This is the mnemonic to be assembled. It can be used in raw
	form like listed above, or  with addition of suffixes like
	'S'
<Dest>
	This is the destination of where the result will be stored.
	The destination will always be an ARM register from R0-R15
<Operand 1>
	First item of info that will be manipulated. Will always be
	an ARM register from R0-R15. Operand1 may also be same as
	destination.
<Operand2>
	Operand2 has more flexibility than Operand1. Operand2 can 
	also be an ARM register like Operand1; however, Operand2 can
	be a specified value or a constant.

   Examples of data processing instructions
	ADD R0,R1,R2		@ R0=R1+R2
	ADDS R2,R3,#1		@ R2=R3+1 and set flags
	MOV R7,#128		@ R7=128

Addition

	There are two instructions that handle addition: 
	ADD (add) and ADC (add with carry)
	
	ADD (<suffix>) <dest>, <Operand1>, <Operand2>
	ADC (<suffix>) <dest>, <Operand1>, <Operand2>

	This program  clears R0
	places 1 in R1
	and sets all 32bits of R2
	THIS is the largest number that can be stored in a 4byte register.
	What will happen?

	MOV R0, #0		
	MOV R1, #1
	MOV R2, #0xFFFFFFFF		@ This is -1 btw
	ADDS R0,R1,R2
	
	What about when you want to adds, let's say a 128bit number?
	"We have a 32 bit machine though?" <---Check program prog6b.s

	When adding a number and you need to carry from the result of a 
	previous addition of two registers, you want to use ADD with 'S'
	suffix to turn on the Carry Flag if it has one.

 1	ADDS R1,R4,R7	@ add low words & check for a carry
 2	ADCS R2,R5,R8	@ add middle words with carry
 3	ADCS R3,R6,R9   @ add high words with carry
 
	Line 1 does an addition and updates carry flag
	Line 2 does an addition WITH carry and Updates carry flag
	Line 3 does an addition WITH carry and Updates carry flag

	
Subtraction

	4 Instructions for Subtraction
	
	SUB (<suffix>) <dest>, <Operand1>, <Operand2>
	SBC	""       ""        ""	      ""
	RSB     ""       ""        ""         ""
	RSC     ""       ""        ""         ""

	SUB - Straight forward subtraction, ignores flags
	SBC - Subtractions that takes Carry flag into consideration
	
	RSB - Same as SUB, but Operands are switched.
		ex:	SUB R0,R1,R2	@ subtracts R2 from R1 and saves in R0
			RSB R0,R1,R2	@ subtracts R1 from R2 and saves in R0
	
	When performing the following:
			MOV R0, #0	@ R0 = 0
			MOV R1,0xFF	@ R1 = 0xFF = 255
			MOV R2,0xFE	@ R2 = 0xFE = 254
			SUBS R0,R1,R2	@ R0 = 0xFF-0xFE = 255-254

	The result should be 1; however, the status register will show
	that the carry flag has been set.

	*Note, the carry flag is set because the computer doesnt actually 
	perform a subtraction, but rather an addition of a negative number
	by using Two's compliment. (Of course this stupid book doesn't 
	explain that, it is inferred.

	Subtraction = Addition of a negative number
	0xFF = 0b1111 1111       0b1111 1111	
	0xFE = 0b1111 1110     + 0b0000 0010	Two's Compliment
				 0b0000 0001	With Carry Flag set
				The Most significant bits ended up with a 
				carry at the end of the word. This is why
				carry flag is set when using SUBS
	
	RSBS R0,R1,R2		@ Reverses the subtraction as shown above
				@ and updates carry flag
	However, if we used the same values as before, this would
	result in:
			0xFFFFFFFF @ (-1) and carry flag is clear.
	
	0b1111 1110	  0b1111 1110
	0b1111 1111 ----> 0b0000 0001 adds up to ob11111111 = -1

	This book is garbage at explaining this /: Or maybe....
	I understand it better than how it is explained?

	
Multiplication
	32-bit multiplication, the first instructions takes the form:
	
	MUL (<suffix>) <dest>, <Operand1>, <Operand2>
	
	There are rules to how its used:
		Dest: Must be a register, CANNOT be the same as 
		      Operand1. R15 CANNOT be used as a destination.
		Operand1: Must be a register, cannot be destination.
		Operand2: Must be a register, cannot be an immediate
			  constant or shifted operation.
	Example of proper use: 
		MUL S R0,R4,R5	@ R0=R4*R5 and set status
	

	MLA - Multiply with Accumulate
	MLA (<suffix>) <dest>, <Operand1>, <Operand2>, <Sum> 
	Allows to add the results of a multiplication to a total (<Sum>).
	
	MLA R0,R1,R2,R3		@ R0=(R1*R2)+R3
	
	The <dest>  may also be the same register as the <sum>
	The above example can be written like so:
	
	MLA R0,R1,R2,R0		@ R0=(R1*R2)+R0
